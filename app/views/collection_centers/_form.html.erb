
<%= form_with(model: collection_center, local: true) do |form| %>
    <% if collection_center.errors.any? %>
        <div id="error_explanation">
          <h2><%= pluralize(relief_camp.errors.count, "error") %> prohibited this collection_center from being saved:</h2>

          <ul>
            <% collection_center.errors.full_messages.each do |message| %>
                <li><%= message %></li>
            <% end %>
          </ul>
        </div>
    <% end %>

    <div class="col-md-12 col-xs-12" style="margin-bottom: 15px;margin-left: 100px;">
      <div class="clearfix" style="margin-bottom: 10px"></div>
      <div id="mapCanvas" style="height: 300px;width: 100%;margin: 0px !important" class="col-md-10 col-md-offset-1"></div>
      <div class="clearfix"></div>
    </div>
    <div class="card" style="margin: 20px">


    <div class="form-group row">
      <div class="col-sm-6 mb-3 mb-sm-0">
        <%= form.label :address %>
        <%= form.text_field :address,  id: 'ip_loc_name' %>
        <%= form.hidden_field :latitude, id: 'ip_latitude'  %>
        <%= form.hidden_field  :longitude, id: 'ip_longitude' %>

      </div>
      <div class="col-sm-6">
        <%= form.label :phone %>
        <%= form.text_field :phone %>
      </div>
    </div>
    <div class="form-group row">
      <div class="col-sm-6 mb-3 mb-sm-0">
        <%= form.label :center_name %>
        <%= form.text_field :center_name %>
      </div>
      <div class="col-sm-6">
        <%= form.label :description %>
        <%= form.text_field :description %>
      </div>
    </div>

    <div class="form-actions">
      <%= form.submit class: "btn btn-primary" %>
    </div>
      </div>
<% end %>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDJB81zVAkoku43yuTvTgthF8eXv1TWsuA&libraries=places&callback=initMap"
        async defer></script>
<script>
    var geocoder = null;
    var marker = null;
    var map;
    var input1 = document.getElementById('ip_loc_name');

    function initMap() {
        geocoder = new google.maps.Geocoder();
        var options = {
            zoom: 12,
            center: {lat: parseFloat($('#ip_latitude').val()) || 10.9760, lng: parseFloat($('#ip_longitude').val()) || 76.2254}
        }
        var latlng = {lat: parseFloat($('#ip_latitude').val()),lng: parseFloat($('#ip_longitude').val())};
        map = new google.maps.Map(document.getElementById('mapCanvas'), options);

        if ($('#ip_latitude').val() != undefined) {
            marker = new google.maps.Marker({
                position: latlng,
                map: map,
            })
        }

        google.maps.event.addListener(map, 'click', function (event) {
            addMarker({coords: event.latLng});
        });

        var autocomplete = new google.maps.places.Autocomplete(input1);
        autocomplete.bindTo('bounds', map);
        autocomplete.addListener('place_changed', function () {
            if (marker) {
                marker.setMap(null)
            }

            $('#ip_latitude').val(autocomplete.getPlace().geometry.location.lat());
            $('#ip_longitude').val(autocomplete.getPlace().geometry.location.lng());

            marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });

            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

        });

    }


    function addMarker(props) {
        if (marker) {
            marker.setMap(null)
        }
        geocodePosition(props.coords);
        $('#ip_latitude').val(props.coords.lat());
        $('#ip_longitude').val(props.coords.lng());
        marker = new google.maps.Marker({
            position: props.coords,
            map: map,
        });
    }

    function geocodePosition(pos) {
        geocoder.geocode({
            latLng: pos
        }, function (responses) {
            if (responses && responses.length > 0) {
                $("#ip_loc_name").val(responses[0].formatted_address);
            } else {
                $("#ip_loc_name").val('No address');
            }
        });
    }


</script>
